using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Fighter.Generator
{
	[Generator]
	public class CodeGenerator : ISourceGenerator
	{
		public void Execute(GeneratorExecutionContext context)
		{
			context.AddSource("Router.g.cs", GenerateRouter(context));
		}
		string GenerateRouter(GeneratorExecutionContext context)
		{
			List<string> namespaces = new();
			StringBuilder sb = new();
			sb.AppendLine($"namespace Fighter.Core;");
			sb.AppendLine($"//Auto generated by Fighter");
			sb.AppendLine($"public static partial class Router");
			sb.AppendLine("{");
			sb.AppendLine($"\tpublic static void Process(int netid, string uid, string route, byte[] data)");
			sb.AppendLine("\t{");
			sb.AppendLine("\t\tswitch (route)");
			sb.AppendLine("\t\t{");
			foreach (var tree in context.Compilation.SyntaxTrees)
			{
				var classNodes = tree.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>();
				foreach (var classNode in classNodes)
				{
					var namespaceNodes = classNode.SyntaxTree.GetRoot().DescendantNodes().OfType<NamespaceDeclarationSyntax>();
					if (namespaceNodes.Count() == 0) continue;

					var namespaceNode = namespaceNodes.First();
					bool matched = false;
					string? route = null;

					foreach (var attrList in classNode.AttributeLists)
					{
						foreach (var attr in attrList.Attributes)
						{
							if (attr.Name.ToString() == "NetworkMessage") {
								matched = true;
								route = attr.ArgumentList?.Arguments.First().Expression.ToString();
							}
						}
					}
					if (!matched) continue;
					string type = $"global::{namespaceNode.Name}.{classNode.Identifier}";

					sb.AppendLine($"\t\t\tcase {route}:");
					sb.AppendLine("\t\t\t{");
					sb.AppendLine($"\t\t\t\t{type}.OnReceive(netid,uid,{type}.Deserialize(data));");
					sb.AppendLine($"\t\t\t\tbreak;");
					sb.AppendLine("\t\t\t}");
				}
			}
			sb.AppendLine("\t\t}");
			sb.AppendLine("\t}");
			sb.AppendLine("}");
			return sb.ToString();
		}

		public void Initialize(GeneratorInitializationContext context)
		{
		}
	}
}
